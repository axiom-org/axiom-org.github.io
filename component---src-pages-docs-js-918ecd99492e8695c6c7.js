(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{143:function(e,t,o){"use strict";o.r(t);o(37),o(39),o(158),o(159),o(79),o(164);var n=o(165),a=o(0),i=o.n(a),r=o(149),c=(o(151),o(152),o(153),o(171),o(154),o(155),o(156),o(157),function(e){var t=e.subsectionID,o=e.title,n=e.html;return i.a.createElement("div",{id:t,className:"docs-content-inner page-section"},i.a.createElement("h1",null,o),i.a.createElement("div",{dangerouslySetInnerHTML:{__html:n}}))}),s=o(144),l=[{name:"Getting Started",id:"start",subsections:["Introduction","Installing the CLI","Signing Up","Creating a Bucket","Storing Files"]},{name:"CLI Reference",id:"cli",subsections:["CLI Overview","axiom alloc","axiom allocate","axiom config","axiom create-bucket","axiom create-provider","axiom dealloc","axiom deallocate","axiom delete-bucket","axiom deploy","axiom download","axiom generate","axiom get-account","axiom get-bucket","axiom get-buckets","axiom get-provider","axiom get-providers","axiom login","axiom logout","axiom new-bucket","axiom send","axiom set-magnet","axiom signup","axiom upload","axiom which"]}];function u(e){var t=window.$(e).offset();t?window.$("html, body").animate({scrollTop:t.top-120},50):console.log("cannot scroll to nonexistent hash:",e)}var h=function(e){if("#"!==e.href[0])throw new Error("bad href in DocLink: ["+e.href+"]");return i.a.createElement("a",{href:e.href,onClick:function(t){t.preventDefault(),u(e.href),window.location.hash=e.href}},e.children)},d=function(e){var t=e.section,o=e.docs;return i.a.createElement("li",null,i.a.createElement(h,{href:"#docs-"+t.id},t.name),i.a.createElement("ul",{className:"one-page-menu","data-offset":"110","data-easing":"easeInOutExpo","data-speed":"1250"},t.subsections.map(function(e){return i.a.createElement("li",null,i.a.createElement(h,{href:"#"+o[e].subsectionID},e))})))};function p(e){var t=[],o=e,n=Array.isArray(o),a=0;for(o=n?o:o[Symbol.iterator]();;){var r;if(n){if(a>=o.length)break;r=o[a++]}else{if((a=o.next()).done)break;r=a.value}var c=r;t.length>0&&t.push(i.a.createElement("div",{className:"line"})),t.push(c)}return t}var m=function(e){var t=e.section,o=e.docs;return i.a.createElement("div",{id:"docs-"+t.id},p(t.subsections.map(function(e){return i.a.createElement(c,Object.assign({},o[e],{key:e}))})))};t.default=function(){Object(a.useEffect)(function(){window.location.hash.length>0&&u(window.location.hash)});var e=n.data,t={},o={},c=e.allMarkdownRemark.edges,h=Array.isArray(c),f=0;for(c=h?c:c[Symbol.iterator]();;){var g;if(h){if(f>=c.length)break;g=c[f++]}else{if((f=c.next()).done)break;g=f.value}var y=g.node,b=y.frontmatter,w=y.html,k=b.section,v=b.title,x="docs-"+k,I=v.toLowerCase().replace(/ /g,"-").replace(/['"]/g,""),E=x+"-"+I;if(o[I])throw new Error("cannot reuse title: "+v);o[I]=!0,t[v]={title:v,html:w,sectionID:x,subsectionID:E}}return i.a.createElement("div",null,i.a.createElement(r.Helmet,null,i.a.createElement("title",null,"Axiom Documentation")),i.a.createElement("div",{id:"wrapper",className:"clearfix"},i.a.createElement(s.a,null),i.a.createElement("section",{id:"content"},i.a.createElement("div",{className:"content-wrap"},i.a.createElement("div",{id:"docs",className:"clearfix"},i.a.createElement("div",{className:"docs-navigation"},i.a.createElement("ul",null,l.map(function(e){return i.a.createElement(d,{section:e,docs:t})}))),i.a.createElement("div",{className:"docs-content"},p(l.map(function(e){return i.a.createElement(m,{section:e,docs:t})}))))))))}},144:function(e,t,o){"use strict";var n=o(0),a=o.n(n);t.a=function(){return a.a.createElement("header",{id:"header",className:"static-sticky"},a.a.createElement("div",{id:"header-wrap"},a.a.createElement("div",{className:"container clearfix"},a.a.createElement("div",{id:"logo"},a.a.createElement("a",{href:"/",className:"standard-logo"},a.a.createElement("img",{src:"/images/axiomlogo@2x.png",alt:"Logo"}))),a.a.createElement("nav",{id:"primary-menu"},a.a.createElement("ul",{className:"one-page-menu"},a.a.createElement("li",null,a.a.createElement("a",{href:"/"},a.a.createElement("div",null,"Home"))),a.a.createElement("li",null,a.a.createElement("a",{href:"/docs"},a.a.createElement("div",null,"Documentation"))),a.a.createElement("li",null,a.a.createElement("a",{href:"/#XXX"},a.a.createElement("div",null,"GitHub"))),a.a.createElement("li",null,a.a.createElement("a",{href:"/#XXX"},a.a.createElement("div",null,"Twitter"))),a.a.createElement("li",null,a.a.createElement("a",{href:"/#section-contact"},a.a.createElement("div",null,"Contact"))))))))}},146:function(e,t,o){var n=o(5),a=o(20),i=o(34),r=o(147),c=o(25).f;e.exports=function(e){var t=a.Symbol||(a.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||c(t,e,{value:r.f(e)})}},147:function(e,t,o){t.f=o(3)},148:function(e,t,o){var n=o(77),a=o(56).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,a)}},158:function(e,t,o){o(146)("asyncIterator")},159:function(e,t,o){"use strict";var n=o(5),a=o(26),i=o(18),r=o(12),c=o(14),s=o(160).KEY,l=o(19),u=o(38),h=o(40),d=o(35),p=o(3),m=o(147),f=o(146),g=o(161),y=o(78),b=o(6),w=o(11),k=o(33),v=o(74),x=o(55),I=o(80),E=o(162),T=o(163),S=o(25),A=o(36),C=T.f,L=S.f,N=E.f,O=n.Symbol,j=n.JSON,D=j&&j.stringify,P=p("_hidden"),z=p("toPrimitive"),Y={}.propertyIsEnumerable,F=u("symbol-registry"),U=u("symbols"),W=u("op-symbols"),H=Object.prototype,q="function"==typeof O,B=n.QObject,R=!B||!B.prototype||!B.prototype.findChild,J=i&&l(function(){return 7!=I(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a})?function(e,t,o){var n=C(H,t);n&&delete H[t],L(e,t,o),n&&e!==H&&L(H,t,n)}:L,M=function(e){var t=U[e]=I(O.prototype);return t._k=e,t},_=q&&"symbol"==typeof O.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof O},X=function(e,t,o){return e===H&&X(W,t,o),b(e),t=v(t,!0),b(o),a(U,t)?(o.enumerable?(a(e,P)&&e[P][t]&&(e[P][t]=!1),o=I(o,{enumerable:x(0,!1)})):(a(e,P)||L(e,P,x(1,{})),e[P][t]=!0),J(e,t,o)):L(e,t,o)},G=function(e,t){b(e);for(var o,n=g(t=k(t)),a=0,i=n.length;i>a;)X(e,o=n[a++],t[o]);return e},K=function(e){var t=Y.call(this,e=v(e,!0));return!(this===H&&a(U,e)&&!a(W,e))&&(!(t||!a(this,e)||!a(U,e)||a(this,P)&&this[P][e])||t)},$=function(e,t){if(e=k(e),t=v(t,!0),e!==H||!a(U,t)||a(W,t)){var o=C(e,t);return!o||!a(U,t)||a(e,P)&&e[P][t]||(o.enumerable=!0),o}},Q=function(e){for(var t,o=N(k(e)),n=[],i=0;o.length>i;)a(U,t=o[i++])||t==P||t==s||n.push(t);return n},V=function(e){for(var t,o=e===H,n=N(o?W:k(e)),i=[],r=0;n.length>r;)!a(U,t=n[r++])||o&&!a(H,t)||i.push(U[t]);return i};q||(c((O=function(){if(this instanceof O)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(o){this===H&&t.call(W,o),a(this,P)&&a(this[P],e)&&(this[P][e]=!1),J(this,e,x(1,o))};return i&&R&&J(H,e,{configurable:!0,set:t}),M(e)}).prototype,"toString",function(){return this._k}),T.f=$,S.f=X,o(148).f=E.f=Q,o(73).f=K,o(75).f=V,i&&!o(34)&&c(H,"propertyIsEnumerable",K,!0),m.f=function(e){return M(p(e))}),r(r.G+r.W+r.F*!q,{Symbol:O});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Z.length>ee;)p(Z[ee++]);for(var te=A(p.store),oe=0;te.length>oe;)f(te[oe++]);r(r.S+r.F*!q,"Symbol",{for:function(e){return a(F,e+="")?F[e]:F[e]=O(e)},keyFor:function(e){if(!_(e))throw TypeError(e+" is not a symbol!");for(var t in F)if(F[t]===e)return t},useSetter:function(){R=!0},useSimple:function(){R=!1}}),r(r.S+r.F*!q,"Object",{create:function(e,t){return void 0===t?I(e):G(I(e),t)},defineProperty:X,defineProperties:G,getOwnPropertyDescriptor:$,getOwnPropertyNames:Q,getOwnPropertySymbols:V}),j&&r(r.S+r.F*(!q||l(function(){var e=O();return"[null]"!=D([e])||"{}"!=D({a:e})||"{}"!=D(Object(e))})),"JSON",{stringify:function(e){for(var t,o,n=[e],a=1;arguments.length>a;)n.push(arguments[a++]);if(o=t=n[1],(w(t)||void 0!==e)&&!_(e))return y(t)||(t=function(e,t){if("function"==typeof o&&(t=o.call(this,e,t)),!_(t))return t}),n[1]=t,D.apply(j,n)}}),O.prototype[z]||o(13)(O.prototype,z,O.prototype.valueOf),h(O,"Symbol"),h(Math,"Math",!0),h(n.JSON,"JSON",!0)},160:function(e,t,o){var n=o(35)("meta"),a=o(11),i=o(26),r=o(25).f,c=0,s=Object.isExtensible||function(){return!0},l=!o(19)(function(){return s(Object.preventExtensions({}))}),u=function(e){r(e,n,{value:{i:"O"+ ++c,w:{}}})},h=e.exports={KEY:n,NEED:!1,fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,n)){if(!s(e))return"F";if(!t)return"E";u(e)}return e[n].i},getWeak:function(e,t){if(!i(e,n)){if(!s(e))return!0;if(!t)return!1;u(e)}return e[n].w},onFreeze:function(e){return l&&h.NEED&&s(e)&&!i(e,n)&&u(e),e}}},161:function(e,t,o){var n=o(36),a=o(75),i=o(73);e.exports=function(e){var t=n(e),o=a.f;if(o)for(var r,c=o(e),s=i.f,l=0;c.length>l;)s.call(e,r=c[l++])&&t.push(r);return t}},162:function(e,t,o){var n=o(33),a=o(148).f,i={}.toString,r="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return r&&"[object Window]"==i.call(e)?function(e){try{return a(e)}catch(t){return r.slice()}}(e):a(n(e))}},163:function(e,t,o){var n=o(73),a=o(55),i=o(33),r=o(74),c=o(26),s=o(76),l=Object.getOwnPropertyDescriptor;t.f=o(18)?l:function(e,t){if(e=i(e),t=r(t,!0),s)try{return l(e,t)}catch(o){}if(c(e,t))return a(!n.f.call(e,t),e[t])}},164:function(e,t,o){var n=o(25).f,a=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in a||o(18)&&n(a,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},165:function(e){e.exports={data:{allMarkdownRemark:{edges:[{node:{frontmatter:{title:"axiom config",section:"cli"},html:'<p>Used in one of two ways:</p>\n<pre><code class="language-bash">axiom config alpha\naxiom config local\n</code></pre>\n<p><code>axiom config</code> switches the CLI between using different networks. There are two Axiom networks that it can talk to. <code>alpha</code> is the developer network that you can deploy things to and have them be accessible to the outside world. <code>local</code> is a network that you are running on your own machine, for testing purposes.</p>\n<p>By default, this talks to the alpha network. You don\'t have to use\nthis command unless you are working on the Axiom software itself.</p>'}},{node:{frontmatter:{title:"axiom allocate",section:"cli"},html:'<pre><code class="language-bash">axiom allocate [bucketName] [providerID]\n</code></pre>\n<p>The long form of <a href="#docs-cli-axiom-alloc">axiom alloc</a> for those who prefer spelling out whole words.</p>'}},{node:{frontmatter:{title:"axiom create-bucket",section:"cli"},html:'<pre><code class="language-bash">axiom create-bucket [bucketName] [size]\n</code></pre>\n<p><code>axiom create-bucket</code> creates a new bucket with no providers. This is useful if you wish\nto use a specific set of providers, and manually allocate them yourself later.</p>\n<p><code>size</code> is denominated in megabytes.</p>'}},{node:{frontmatter:{title:"axiom dealloc",section:"cli"},html:"<pre><code class=\"language-bash\">axiom dealloc [bucketName] [providerID]\n</code></pre>\n<p>Deallocates a bucket from a particular provider.</p>\n<p>You might want to run this command if you own a bucket, and a particular provider has\nbeen performing poorly. Axiom doesn't enforce an SLA through the\nblockchain mechanisms itself. So if a provider is not providing good\nservice, you can deallocate your buckets from one provider and\nreallocate them to another.</p>\n<p>You also might want to run this commend if you are running a hosting\nprovider, and you discover a particular bucket contains content that\nyou don't want to be hosting. Perhaps it's illegal in your\njurisdiction, or you just don't like it for whatever\nreason. Deallocating the bucket means you aren't obliged to host it\nany more.</p>\n<p>This command is a synonym of <a href=\"#docs-cli-axiom-deallocate\">axiom\ndeallocate</a> for those who prefer not to\nspell out whole words.</p>"}},{node:{frontmatter:{title:"axiom create-provider",section:"cli"},html:'<pre><code class="language-bash">axiom create-provider [capacity]\n</code></pre>\n<p>This command creates a provider object on the blockchain. The\nblockchain will assign it a unique numerical id, and users creating a\nbucket can use it to specify which provider they want to store their\nfiles.</p>\n<p>You usually wouldn\'t want to do this yourself. If you want to run a\nfile hosting server, try the instructions for running\n<a href="https://github.com/axiom-org/axiom/tree/master/testnet">hserver</a>. When\nyou run an hserver, it automatically creates a provider object if it\ndoesn\'t have one already. This CLI command is useful if you are\nwriting your own file hosting logic, or if you are debugging a buggy hserver.</p>'}},{node:{frontmatter:{title:"axiom deallocate",section:"cli"},html:'<pre><code class="language-bash">axiom deallocate [bucketName] [providerID]\n</code></pre>\n<p>The long form of <a href="#docs-cli-axiom-dealloc">axiom dealloc</a> for those who prefer to type more.</p>'}},{node:{frontmatter:{title:"axiom delete-bucket",section:"cli"},html:'<pre><code class="language-bash">axiom delete-bucket [name]\n</code></pre>\n<p>If you created a bucket that you don\'t want any more, you can use this command to delete it.</p>'}},{node:{frontmatter:{title:"axiom download",section:"cli"},html:'<pre><code class="language-bash">axiom download [bucketName]\n</code></pre>\n<p>Downloads the contents of a bucket to a newly-created directory with\nthe same name as the bucket, in the current working directory.</p>'}},{node:{frontmatter:{title:"axiom deploy",section:"cli"},html:'<pre><code class="language-bash">axiom deploy [directory] [bucketName]\n</code></pre>\n<p>This command is a synonym of <a href="#docs-cli-axiom-upload">axiom\nupload</a>.</p>\n<p>It\'s a bit more logical to have the\ncommands named "upload" and "download" so that the names are kind of\nparallel to each other. But when you\'re building an application, the\ntypical usage pattern is to write some code, and then when you\'re\nready, you deploy that code to production to have the application go\nlive. So it\'s kind of common to call this "deploy" in a command-line\ntool. Anyway, in a fit of indecisiveness we left both commands in the CLI.</p>'}},{node:{frontmatter:{title:"axiom generate",section:"cli"},html:'<pre><code class="language-bash">axiom generate\n</code></pre>\n<p>This command generates a keypair file containing both private key and\npublic key that correspond to a passphrase. You don\'t need this just\nto use the CLI, but you will need this keypair file in order to run\nyour own hosting server. If you\'re interested in running your own\nhosting server, check out the <a href="https://github.com/axiom-org/axiom/tree/master/testnet">instructions\nhere</a>.</p>'}},{node:{frontmatter:{title:"axiom get-account",section:"cli"},html:'<pre><code class="language-bash">axiom get-account [username]\n</code></pre>\n<p>Shows the account data for a user. This includes information like\ntheir account balance and how much total storage they are using.</p>'}},{node:{frontmatter:{title:"axiom get-bucket",section:"cli"},html:'<pre><code class="language-bash">axiom get-bucket [name]\n</code></pre>\n<p>Shows information about a bucket. In particular this tells you the magnet URI you need\nto access the bucket\'s content, the owner of the bucket, and which providers are\nresponsible for the bucket.</p>'}},{node:{frontmatter:{title:"axiom get-provider",section:"cli"},html:'<pre><code class="language-bash">axiom get-provider [id]\n</code></pre>\n<p>Shows information about a particular provider. In particular this tells you the owner of the provider, and which buckets this provider is hosting.</p>'}},{node:{frontmatter:{title:"axiom alloc",section:"cli"},html:'<pre><code class="language-bash">axiom alloc [bucketName] [providerID]\n</code></pre>\n<p>Allocates a bucket to a particular provider.</p>\n<p>Usually you don\'t have to run this command because\n<a href="#docs-cli-axiom-new-bucket">new-bucket</a> allocates a bucket for you. But if you\ncreated the bucket with <a href="#docs-cli-axiom-create-bucket">create-bucket</a>\nit will start out with zero providers, so you have to allocate\nmanually. This is useful if there is a specific set of providers that\nyou would like to use.</p>\n<p>This command is a synonym of <a href="#docs-cli-axiom-allocate">axiom\nallocate</a> for those who prefer to avoid typing.</p>'}},{node:{frontmatter:{title:"axiom get-buckets",section:"cli"},html:'<pre><code class="language-bash">axiom get-buckets [owner=&#x3C;id>] [provider=&#x3C;id>]\n</code></pre>\n<p>Shows which buckets match a query. You can either find buckets owned by a particular\nuser, or buckets that are being hosted by a particular provider.</p>\n<p>If you don\'t provide any arguments, this command will show you all buckets that you own.</p>'}},{node:{frontmatter:{title:"axiom get-providers",section:"cli"},html:'<pre><code class="language-bash">axiom get-providers [owner=&#x3C;user>] [bucket=&#x3C;name>] [available=&#x3C;amount>] [id=&#x3C;id>]\n</code></pre>\n<p>Shows which providers match a query. You can find buckets owned by a\nparticular user, which providers are hosting a particular bucket, or\nproviders with a certain amount of available space.</p>'}},{node:{frontmatter:{title:"axiom login",section:"cli"},html:'<pre><code class="language-bash">axiom login\n</code></pre>\n<p>Asks you for a passphrase and tells you your corresponding public key.</p>\n<p>Most commands, if you aren\'t already logged in, will just ask you to\nlog in. So you usually don\'t need to run this explicitly.</p>\n<p>There is no associated "username" with your passphrase. The passphrase\nis all you need to gain access to the user account. The string username\nin the Axiom system is just the public key associated with your\nkeypair. So your passphrase by itself should be a very unique phrase.</p>\n<p>The CLI stores its configuration information in\n<code>~/.axiom/config.json</code>. The <code>login</code> command will populate that file,\nand subsequent commands will use the information in that file. You\nshould keep this file secure, just like you would with your SSH keys.</p>\n<p>If you regret logging in, you can use <a href="#docs-cli-axiom-logout">axiom\nlogout</a> to log back out.</p>'}},{node:{frontmatter:{title:"axiom logout",section:"cli"},html:'<pre><code class="language-bash">axiom logout\n</code></pre>\n<p>Logs you out. After you log out, none of your keypair information is\nleft on the local machine.</p>\n<p>Once you log out, you might want to use <a href="#docs-cli-axiom-login">axiom login</a> to log back in.</p>'}},{node:{frontmatter:{title:"axiom new-bucket",section:"cli"},html:'<pre><code class="language-bash">axiom new-bucket [bucketName] [size]\n</code></pre>\n<p>Creates a new bucket, finds some providers with enough available space\nto host this bucket, and allocates the bucket to those providers.</p>\n<p>If you want to allocate the bucket yourself, use <a href="#docs-cli-create-bucket">axiom\ncreate-bucket</a> instead, which won\'t\nautomatically allocate the bucket.</p>\n<p><code>size</code> is denominated in megabytes.</p>'}},{node:{frontmatter:{title:"axiom send",section:"cli"},html:'<pre><code class="language-bash">axiom send [recipient] [amount]\n</code></pre>\n<p>Sends currency to another user.</p>\n<p>The recipient here is the public key that is provided when you\ninitially generate an account, or that is included on bucket and\nprovider information. Public keys start with <code>0x</code>.</p>\n<p>Be careful when you use this, because when you send currency, there is\nno way to undo the transaction.</p>'}},{node:{frontmatter:{title:"axiom set-magnet",section:"cli"},html:'<pre><code class="language-bash">axiom set-magnet [bucketName] [magnet]\n</code></pre>\n<p>Updates the magnet URI stored for a particular bucket.</p>\n<p>The file hosting software also runs WebTorrent trackers which will create magnet URIs for bucket contents. So normally you wouldn\'t want to set a magnet directly; you would just use the <a href="#docs-cli-axiom-upload">axiom upload</a> command which does this for you.</p>\n<p>This is useful if you have created a magnet URI in some other way and\nwant your bucket to use it instead. Like if you have a WebTorrent\ntracker with some extra functionality that you want. But these are\nsomewhat obscure cases, so it\'s rare you would want to do this.</p>'}},{node:{frontmatter:{title:"axiom signup",section:"cli"},html:'<pre><code class="language-bash">axiom signup\n</code></pre>\n<p>During the developer beta, we are giving away currency so that people\ncan build applications on the system. This command is how you\ncollect. First, sign up for the\n<a href="https://axiom.org/newsletter">newsletter</a>. Then, run this\ncommand. You will have to enter a token that gets emailed to you, and\nthen you will have an account set up with enough currency to build an\napplication.</p>\n<p>Maybe it\'s a little tacky to make you sign up for the newsletter to\ntry this out. Sorry! At least it makes it a little harder for spammers\nto take up all the capacity in the system.</p>\n<p>Speaking of spammers... when we launch the main net, we plan to keep running applications\noperational and transfer them from the testnet to the main net. But\nwe don\'t plan to keep account balances in place. So there\'s no point in\nspamming this system to get hundreds of developer accounts. The only\nthing this currency is getting you is capacity on the development\nsystem.</p>'}},{node:{frontmatter:{title:"axiom upload",section:"cli"},html:'<pre><code class="language-bash">axiom upload [directory] [bucketName]\n</code></pre>\n<p>Uploads the contents of a local directory to a decentralized\nbucket. The bucket must already have been created, and you must own\nit.</p>'}},{node:{frontmatter:{title:"axiom which",section:"cli"},html:'<pre><code class="language-bash">axiom which\n</code></pre>\n<p>This command just tells you where the file is that is running the CLI itself. It is useful if you are trying to debug a problem about how exactly your CLI is installed.</p>'}},{node:{frontmatter:{title:"CLI Overview",section:"cli"},html:'<p>This section provides a reference to all of the CLI commands.</p>\n<p>The CLI is distributed through the <code>axiom-cli</code> npm package. You can\ninstall the CLI using <a href="https://www.npmjs.com/get-npm">npm</a> or\n<a href="https://yarnpkg.com/">yarn</a>:</p>\n<pre><code class="language-bash">npm install -g axiom-cli\n</code></pre>\n<pre><code class="language-bash">yarn global add axiom-cli\n</code></pre>\n<p>The general format of CLI commands is:</p>\n<pre><code class="language-bash">axiom command-name argument-1 argument-2 [...]\n</code></pre>\n<p>If you run a command with no arguments, you\'ll get a brief usage\nmessage.</p>\n<p>Anything that can be done through the CLI can also be done through the\nHTTP API. The CLI source code is <a href="https://github.com/axiom-org/axiom/blob/master/ts/src/node/cli-main.ts">on\nGitHub</a>\nso if some of its behavior is insufficiently documented, or it\'s\nunclear how to achieve it programmatically, you can check there.</p>\n<p>Several of the CLI commands use bucket names. A bucket name can\noptionally have an application tag on it. If the application tag is\nomitted, the application is considered to be <code>www</code>. For example, in the\nbucket name <code>foobar:bazqux</code>, <code>foobar</code> is the application tag and\n<code>bazqux</code> is the name of the bucket itself.</p>'}},{node:{frontmatter:{title:"Creating a Bucket",section:"start"},html:"<p>To understand file storage on Axiom, it is helpful to understand\nthe concepts of buckets and hosting providers. An Axiom bucket is similar to\nan Amazon S3 bucket. A bucket can hold many files, and a user can own\nmany buckets. Each bucket has a capacity for how many files it can\nstore. One of your buckets could hold the static content for a web\napplication you are deploying, or it could hold the data for an\napplication you are using, or it could hold any sort of files you\nwould like to keep in decentralized storage.</p>\n<p>Data on the blockchain is replicated among every\nmachine running the blockchain. Data in a bucket is\nonly replicated among a few different hosting providers. This\nmakes it relatively inexpensive to store data in a bucket. With the\ndeveloper faucet, you should have enough to pay for about 100 megabytes\nof bucket storage.</p>\n<p>Let's make a bucket. Pick a unique name like\n\"my-cool-example\". Names are unique, so if you pick this exact one it\nprobably won't work because someone else will have gone through the\nexample.</p>\n<p>First, we have to create a new bucket. Let's pick a size of 1 megabyte\nbecause we're just using this as an example:</p>\n<pre><code class=\"language-bash\">axiom new-bucket my-cool-example 1\n</code></pre>\n<p>You should see output that looks like:</p>\n<pre><code>created bucket: www:my-cool-example\nallocated bucket to 1 provider\nallocated bucket to 2 providers\nallocated bucket to 3 providers\nallocated bucket to 4 providers\n</code></pre>\n<p>The <code>www</code> is the application tag for this bucket. It defaults to <code>www</code>\nwhich indicates that these files are intended for web access.</p>\n<p>The <code>new-bucket</code> command will automatically allocate the bucket to a\nfew hosting providers for you. Either the owner of a bucket or the\nhosting provider can deallocate the bucket at any time. As a developer, you\nmight want to reallocate a bucket elsewhere if a hosting provider is providing\na poor service level. As a hosting provider, you might want to\ndeallocate a bucket if you discover that it is hosting content that\nyou don't want to be hosting. Providers are never forced to host\nparticular files.</p>"}},{node:{frontmatter:{title:"Installing the CLI",section:"start"},html:'<p>There are several different ways to interact with Axiom.\nServers running the Axiom blockchain and hosting Axiom\nfiles interact with each other through the wire protocol.\nApplication code typically interacts with Axiom through\nthe JavaScript Axiom client. During the development\nprocess, the most convenient way to interact with Axiom is\ntypically through the CLI.</p>\n<p>The CLI is tested on OS X and Linux. It might also work in Windows.</p>\n<p>You can install the CLI using <a href="https://www.npmjs.com/get-npm">npm</a> or\n<a href="https://yarnpkg.com/">yarn</a>:</p>\n<pre><code class="language-bash">npm install -g axiom-cli\n</code></pre>\n<pre><code class="language-bash">yarn global add axiom-cli\n</code></pre>'}},{node:{frontmatter:{title:"Introduction",section:"start"},html:"<p>Axiom is a platform for building decentralized\napplications. It is also a cryptocurrency. If you've used\napplication platforms like Heroku or App Engine before,\nyou'll find parts of this familiar. If you've developed an\napplication using other cryptocurrencies like Ethereum\nbefore, you'll find different parts of this familiar.</p>\n<p>Currently, Axiom primarily targets web applications built\nin JavaScript. If you know how to make a simple website,\nyou'll be able to deploy a simple decentralized site. To\nbuild a more complicated application, you'll probably want\nto be familiar with a JavaScript framework like React or\nVue.</p>\n<p>The best way to learn about the Axiom system is\nto build a simple application on it. The \"Getting Started\"\nsection of this documentation will explain how to get an account set up and how to deploy\na simple static site to Axiom. The \"Building Applications\" section will explain how to build a\nslightly more complicated application. If you're\ninterested in learning more, the later sections will go\ninto more detail.</p>\n<p>Good luck!</p>"}},{node:{frontmatter:{title:"Here Is Some Lorem Ipsum",section:"lorem-ipsum"},html:"<p>Blah blobbity blah</p>"}},{node:{frontmatter:{title:"Here Is Some Morem Ipsum",section:"morem-ipsum"},html:"<p>Hum diddly hum</p>"}},{node:{frontmatter:{title:"Signing Up",section:"start"},html:'<p>The Axiom system stores data in two different ways. The\nblockchain is replicated among every machine running\nAxiom. Storage space there is limited, but it is very\nreliable. Account data, like public keys to validate\nusers, and balances indicating how much cryptocurrency is\nowned by each account, is kept on the blockchain.</p>\n<p>File storage, on the other hand, is not replicated among\nevery machine running Axiom. Files stored on Axiom will\nonly be replicated to a few different machines. Only hash\nvalues of file content will be stored on the blockchain.</p>\n<p>To store any data in Axiom, you\'ll need to acquire some\ncryptocurrency, to pay for storage. To make this easier\nduring the beta period, we have a faucet set up to give\nout a small amount of currency to use for development.</p>\n<p>To sign up, first\n<a href="https://axiom.org/newsletter">register your email here</a>.\nThen run this command:</p>\n<pre><code class="language-bash">axiom signup youremail@example.com\n</code></pre>\n<p>You will have to enter a token that was emailed to you, so\nplease use a legitimate email address.</p>\n<p>The signup command will log in the CLI and generate a secure\npassphrase for you. Keep this somewhere secure.</p>\n<p>Once you complete the signup command, you should have\nenough money in your account to pay for the storage used\nin application development. To check your account balance,\nrun:</p>\n<pre><code class="language-bash">axiom status\n</code></pre>\n<p>Log in using the passphrase that the <code>signup</code> command generated.\nYou should see output that displays a balance greater than\nzero. Congratulations, you now own some of the Axiom cryptocurrency!</p>'}},{node:{frontmatter:{title:"Storing Files",section:"start"},html:'<p>Now that you\'ve created a bucket, you can upload files to that\nbucket. The simplest way to upload files is to use the <code>axiom upload</code>\ncommand to upload the contents of a local directory to a bucket:</p>\n<pre><code class="language-bash">mkdir ~/my-cool-example\ncd ~/my-cool-example\necho "hello decentralized world" > index.html\naxiom upload . my-cool-example\n</code></pre>\n<p>When you run an upload, the files are transferred to the\nhosting providers via\n<a href="https://github.com/webtorrent/webtorrent">WebTorrent</a>. The blockchain\nonly contains a single hash value encoded in a <a href="https://en.wikipedia.org/wiki/Magnet_URI_scheme">magnet\nURI</a>, so that other\nusers can verify the contents of the bucket.</p>\n<p>Using the WebTorrent protocol for uploads and downloads means that the\ncosts of file hosting for providers don\'t scale linearly according to\nthe number of downloads, and can be amortized into the base cost of\nthe bucket. When you update the blockchain, you do have to pay a\nfee. The CLI by default attempts to use a 0-fee transaction. Since the\nblockchain uses the <a href="http://www.scs.stanford.edu/~dm/blog/simplified-scp.html">Stellar Consensus\nProtocol</a>,\nhopefully these fees can stay very small over time even as blockchain\nusage increases.</p>\n<p>Now that we\'ve uploaded content to a bucket, let\'s download it to make\nsure it\'s working.</p>\n<pre><code class="language-bash">mkdir ~/testdir\ncd ~/testdir\naxiom download my-cool-example\n</code></pre>\n<p>You should be able to inspect the newly-created <code>~/testdir</code> directory\nto see a copy of your uploaded file.</p>'}}]}}}}}]);
//# sourceMappingURL=component---src-pages-docs-js-918ecd99492e8695c6c7.js.map